from OmegaExpansion import pwmExpimport osimport timeimport sysimport paho.mqtt.client as mqttimport jsonimport main_publisherimport threadingHOST = "192.168.3.1"PORT = 1883# user = 'root'# passwd = 'onioneer'data = {"status": "", "frequency": "1150", "speed": "60", "direction": "100", "system_load": ""}exit_signal = threading.Event()def on_connect(client, userdata, flags, rc):    client.subscribe('#', qos=1)    client.subscribe('sensor/#')    client.subscribe("$SYS/#")def check_status():    status = pwmExp.driverInit()    return statusdef check_init():    bInit = pwmExp.checkInit()    if (bInit == 0):        print('The Servo Expansion needs to be initialized\n')        return "ERR"    else:        print('The Servo Expansion is up and running!')def publish(topic, status, frequency, speed, direction):    print("Status Changed - Publishing")    publisher = main_publisher.Publisher()    pub_client = publisher.connect_on(HOST, PORT)    pub_client.loop_start()    publisher.publish_mqtt(pub_client, topic, status, frequency, speed, direction)def sensor_status_run(client, userdata, message):    try:        msg = json.loads(message.payload)  # this is python dict        print('Topic: %s | QOS: %s  | Message: %s' %              (message.topic, message.qos, msg))        if msg:            if msg["status"] == "On":                print("On status received")                data["status"] = msg["status"]                data["speed"] = "50"                data["frequency"] = "1150"                data["direction"] = "100"                toggle_motor(1150, 60, 100, "On")                publish("sensor/status/update", msg["status"], 1150, 60, 100)            elif msg["status"] == "Off":                print("Off Status Received")                data["status"] = msg["status"]                data["speed"] = "0"                data["direction"] = "0"                toggle_motor(1150, 0, 0, "Off")                publish("sensor/status/update", msg["status"], 1150, 0, 0)        else:            print("No JSON Payload")            # toggle_motor(1150, 0, 0, "Off")            # print("No JSON Data Decoded - Motor Off")            # publish("sensor/status/update", "off", 1150, 0, 0)    except ValueError:        print("JSON ERROR")def sensor_change_speed(client, userdata, message):    try:        msg = json.loads(message.payload)  # this is python dict        print('Topic: %s | QOS: %s  | Message: %s' %              (message.topic, message.qos, msg))        if msg:            print("---Changing Speed---")            data["speed"] = msg["speed"]            motor_value_change(speed=float(msg["speed"]), attribute="speed")            publish("sensor/speed/update", data["status"], data["frequency"], msg["speed"], data["direction"])        else:            pass  # empty json    except ValueError:        print("JSON ERROR")def sensor_change_direction(client, userdata, message):    try:        msg = json.loads(message.payload)  # this is python dict        print('Topic: %s | QOS: %s  | Message: %s' %              (message.topic, message.qos, msg))        if msg:            print("---Changing Direction---")            data["direction"] = msg["direction"]            motor_value_change(direction=float(msg["direction"]), attribute="direction")            publish("sensor/direction/update", data["status"], data["frequency"], data["speed"], msg["direction"])        else:            pass  # empty json    except ValueError:        print("JSON ERROR")def sensor_complete_control(client, userdata, message):    try:        msg = json.loads(message.payload)  # this is python dict        print('Topic: %s | QOS: %s  | Message: %s' %              (message.topic, message.qos, msg))        if msg:            print("---Customizing Sensor Control---")            motor_value_change(frequency=float(msg["frequency"]), speed=float(msg["speed"]), direction=float(msg["direction"]), status=msg["status"], attribute="custom")            publish("sensor/status/update", msg["status"], msg["frequency"], msg["speed"], msg["direction"])            for k in data.keys():                msg[k] = data[k]        else:            pass  # empty json    except ValueError:        print("JSON ERROR")def motor_value_change(frequency=1150, speed=0, direction=0, status="null", delay=0, attribute="null"):    if attribute == "speed":        time.sleep(0.5)        pwmExp.setFrequency(frequency)        pwmExp.setupDriver(0, speed, 0)  # set enabled Pin to high on 0    elif attribute == 'direction':        motor_change(frequency, direction)    elif attribute == 'custom':        if status == "Off" or frequency != float(1150):            print("Motor OFF custom scope")            toggle_motor(1150, 0, 0, "Off")            data["status"] = "Off"            data["speed"] = "0"            data["direction"] = "0"            publish("sensor/status/update", "Off", 1150, 0, 0)        elif status == "On" and data["status"] != "On":            print("Motor ON custom scope")            time.sleep(0.5)            data["status"] = "On"            data["direction"] = str(direction)            data["speed"] = str(speed)            data["frequency"] = str(frequency)            toggle_motor(frequency, speed, direction, "On")            publish("sensor/status/update", status, frequency, speed, direction)        elif speed != float(data["speed"]) and direction == float(data["direction"]): #change speed ONLY            print("SPEED CHANGE")            time.sleep(0.5)            data["status"] = "On"            data["speed"] = str(speed)            data["frequency"] = str(frequency)            pwmExp.setFrequency(frequency)            pwmExp.setupDriver(0, speed, 0)  # set enabled Pin to high on 0            publish("sensor/status/update", status, frequency, speed, direction)        elif speed == float(data["speed"]) and direction != float(data["direction"]): #change direction BUT not speed            time.sleep(0.5)            print("Change Dir BUT not speed")            data["status"] = "On"            data["direction"] = str(direction)            data["frequency"] = str(frequency)            motor_change(frequency, direction, speed=float(data["speed"]))            publish("sensor/status/update", status, frequency, speed, direction)        else:            print("change both speed and dir")            time.sleep(0.5)            data["status"] = "On"            data["direction"] = str(direction)            data["speed"] = str(speed)            data["frequency"] = str(frequency)            motor_change(frequency, direction, speed, "spdDir")  # change both speed and directiondef motor_change(frequency, direction, speed=60, attribute="null"):    pwmExp.setFrequency(frequency)    pwmExp.setupDriver(0, 0, 0)  # set enabled Pin to low on 0    time.sleep(1)    pwmExp.setupDriver(1, direction, 0)  # direction    pwmExp.setupDriver(0, speed, 0)  # speed - re-enable enable pin    if attribute == "spdDir":        time.sleep(0.5)        pwmExp.setupDriver(0, speed, 0)def toggle_motor(frequency=1150, speed=0, direction=0, status="", delay=0):    time.sleep(0.5)    pwmExp.setFrequency(frequency)    pwmExp.setupDriver(0, 0, 0)  # set enabled Pin to low on 0    if status == "On":        pwmExp.setupDriver(0, 100, 0)  # set enabled Pin to high on 0        pwmExp.setupDriver(1, direction, 0)  # direction        pwmExp.setupDriver(0, speed, 0)  # set speed on PIN 0    else:        pwmExp.setupDriver(1, direction, 0)def period_update():    def main_pub(data):        print("----PUBLISHING Periodic Update----")        pub.period_publish(pub_client, data)        pub_client.loop_stop()    pub = main_publisher.Publisher()    pub_client = pub.connect_on(HOST, PORT)    pub_client.loop_start()    while not exit_signal.is_set():        load1, load5, load15 = os.getloadavg()        data["system_load"] = str(load1)        main_pub(data)        time.sleep(10)    if exit_signal.is_set():        pub_client.loop_stop()def main():    # motor intialized status    result = check_init()    if result == "ERR":        print("Error during initialization")        sys.exit(0)def main_motor_run():    while not exit_signal.is_set():        # main()  # error handling for motor        print("RUNNING MOTOR LOOP")        client = mqtt.Client()        client.on_connect = on_connect        client.message_callback_add("sensor/status/run", sensor_status_run)        client.message_callback_add("sensor/change/speed", sensor_change_speed)        client.message_callback_add("sensor/change/direction", sensor_change_direction)        client.message_callback_add("sensor/complete/control", sensor_complete_control)        client.connect(HOST, PORT)        client.loop_forever()        if exit_signal.is_set():            break    client.loop_stop()if __name__ == '__main__':    try:        motor_run = threading.Thread(name='main_motor_run', target=main_motor_run)        motor_run.setDaemon(True)        motor_run.start()        periodic_update = threading.Thread(name='period_update', target=period_update)        periodic_update.setDaemon(True)        periodic_update.start()        while not exit_signal.is_set():  # enable children threads to exit the main thread, too            time.sleep(0.5)    except (KeyboardInterrupt, SystemExit):        print("Stopping")        toggle_motor(1150, 0, 0, "Off")        # data["status"] = "Off"        # data["speed"] = "0"        # data["direction"] = "0"        publish("sensor/status/update", "Off", 1150, 0, 0)        exit_signal.set()        sys.exit(0)